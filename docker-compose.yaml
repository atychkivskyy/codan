services:

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    restart: always
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/log:/mosquitto/log/
      - mosquitto-data:/mosquitto/data/
    networks:
      - codan
    healthcheck:
      test: [ "CMD", "timeout", "1", "mosquitto_sub", "-h", "localhost", "-p", "1883", "-t", "'topic'", "-E", "-i", "probe" ]
      interval: 30s
      timeout: 10s
      retries: 3

  sensor-middleware:
    build: ./sensor-middleware
    deploy:
      mode: replicated
      replicas: 3
    environment:
      SENSOR_MIDDLEWARE_PORT: ${SENSOR_MIDDLEWARE_PORT}
    restart: always
    depends_on:
      - mosquitto
    networks:
      - codan
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SENSOR_MIDDLEWARE_PORT}/test" ]
      interval: 30s
      timeout: 10s
      retries: 3

  token-bucket-queue:
    image: eclipse-mosquitto:latest
    container_name: token-bucket-queue
    ports:
      - "1884:1883" # different port for this service 1884
      - "9002:9001" # different port for this service 9002
    restart: always
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/log:/mosquitto/log/
      - mosquitto-data:/mosquitto/data/
    networks:
      - codan
        
  token-bucket:
    build: ./redis
    container_name: token-bucket
    environment:
      TOKENS: ${TOKENS}
    ports:
      - "6379:6379"
    networks:
      - codan

  openresty:
    build: ./proxy
    container_name: openresty
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
    restart: always
    depends_on:
      - sensor-middleware
    networks:
      - codan
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${NGINX_PORT}/test" ]
      interval: 30s
      timeout: 10s
      retries: 3

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    ports:
      - ${DOCKER_INFLUXDB_INIT_PORT}:8086
    volumes:
      - influxdb-data:/var/lib/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: ${DOCKER_INFLUXDB_INIT_MODE}
      DOCKER_INFLUXDB_INIT_USERNAME: ${DOCKER_INFLUXDB_INIT_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${DOCKER_INFLUXDB_INIT_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${DOCKER_INFLUXDB_INIT_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET}
      DOCKER_INFLUXDB_INIT_RETENTION: ${DOCKER_INFLUXDB_INIT_RETENTION}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      DOCKER_INFLUXDB_INIT_PORT: ${DOCKER_INFLUXDB_INIT_PORT}
    networks:
      - codan
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${DOCKER_INFLUXDB_INIT_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    ports:
      - ${GRAFANA_PORT}:3000
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./grafana/metrics.json:/var/lib/grafana/dashboards/metrics.json:ro
    depends_on:
      - influxdb
    networks:
      - codan
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${GRAFANA_PORT}/" ]
      interval: 30s
      timeout: 10s
      retries: 3

  influxdb-middleware:
    build: ./influxdb-middleware
    container_name: influxdb-middleware
    restart: always
    environment:
      INFLUXDB_URL: "http://influxdb:8086"
      INFLUXDB_TOKEN: ${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      INFLUXDB_ORG: ${DOCKER_INFLUXDB_INIT_ORG}
      INFLUXDB_BUCKET: ${DOCKER_INFLUXDB_INIT_BUCKET}
      MQTT_BROKER: ${MQTT_BROKER}
      MQTT_PORT: ${MQTT_BROKER_PORT}
      MQTT_TOPIC: "sensor/#"
    depends_on:
      - influxdb
      - mosquitto
    networks:
      - codan

  soap:
    build: ./soap
    container_name: soap
    restart: always
    ports:
      - 8080:8080
    networks:
      - codan

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - codan
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3

  app-backend:
    build: ./app-backend
    container_name: app-backend
    restart: always
    ports:
      - "8826:8826"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - codan

networks:
  codan:
    name: codan
    driver: bridge

volumes:
  mosquitto-data:
  grafana-data:
  influxdb-data:
  mysql-data:

