# cambiar con los calculos de la cantidad de conexiones que se esperan
worker_processes auto;

events {
        # cambiar con los calculos de la cantidad de conexiones que se esperan
        worker_connections 4096;
}

http {
    lua_shared_dict blocked_ips 10m;

    upstream sensor_middleware {
        hash $request_uri consistent;
        server sensor-middleware:3000;

    }

    server {
        listen 80;
        resolver 127.0.0.11 valid=5s;

        location = /manage_ips {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                local ip = args.ip
                local action = args.action -- "block" or "unblock"

                if not ip or not action then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("Bad request")
                    return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end

                local ip_blocked = ngx.shared.blocked_ips
                if action == "block" then
                    ip_blocked:set(ip, true)
                    ngx.say(ip .. " has been blocked")
                elseif action == "unblock" then
                    ip_blocked:delete(ip)
                    ngx.say(ip .. " has been unblocked")
                end
            }
            # allow 127.0.0.1;
            # deny all;
        }

        location / {
            access_by_lua_block {
                local ip_blocked = ngx.shared.blocked_ips
                if ip_blocked:get(ngx.var.remote_addr) then
                    ngx.log(ngx.ERR, "Blocked IP Access Attempt: " .. ngx.var.remote_addr)
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            proxy_pass http://sensor_middleware;
        }
    }
}